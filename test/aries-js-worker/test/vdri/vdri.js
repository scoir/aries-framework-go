/*
Copyright SecureKey Technologies Inc. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

import {newAries, newAriesREST} from "../common.js"
import {environment} from "../environment.js";

const agentControllerApiUrl = `${environment.HTTP_SCHEME}://${environment.USER_HOST}:${environment.USER_API_PORT}`

// did document
const didName = "alice-did"
const didID = "did:peer:21tDAKCERh95uGgKbJNHYp"
const doc = {
  "@context": ["https://w3id.org/did/v1","https://w3id.org/did/v2"],
  "id": "did:peer:21tDAKCERh95uGgKbJNHYp",
  "publicKey": [
    {
      "id": "did:peer:123456789abcdefghi#keys-1",
      "type": "Secp256k1VerificationKey2018",
      "controller": "did:peer:123456789abcdefghi",
      "publicKeyBase58": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
    },
    {
      "id": "did:peer:123456789abcdefghw#key2",
      "type": "RsaVerificationKey2018",
      "controller": "did:peer:123456789abcdefghw",
      "publicKeyPem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAryQICCl6NZ5gDKrnSztO\n3Hy8PEUcuyvg/ikC+VcIo2SFFSf18a3IMYldIugqqqZCs4/4uVW3sbdLs/6PfgdX\n7O9D22ZiFWHPYA2k2N744MNiCD1UE+tJyllUhSblK48bn+v1oZHCM0nYQ2NqUkvS\nj+hwUU3RiWl7x3D2s9wSdNt7XUtW05a/FXehsPSiJfKvHJJnGOX0BgTvkLnkAOTd\nOrUZ/wK69Dzu4IvrN4vs9Nes8vbwPa/ddZEzGR0cQMt0JBkhk9kU/qwqUseP1QRJ\n5I1jR4g8aYPL/ke9K35PxZWuDp3U0UPAZ3PjFAh+5T+fc7gzCs9dPzSHloruU+gl\nFQIDAQAB\n-----END PUBLIC KEY-----"
    }
  ]
}

// scenarios
describe("VDRI", function () {
    let agents
    before(async () => {
        await Promise.all([newAries('demo','demo-agent', ["sidetree@http://localhost:48326/document"]), newAriesREST(agentControllerApiUrl)]).then(
            values => {
                agents = values
            }
        ).catch(
            err => {
                throw err
            }
        )
    })

    after(() => {
        agents.forEach(
            (agent) => {
                agent.destroy()
            }
        )
    })

    it("create public DID using VDRI in WASM and REST Client mode", async function () {
        if (!agents || agents.length === 0) {
            throw new Error("invalid agents initialized")
        }

        for (let i = 0; i < agents.length; i++) {
            await agents[i].vdri.createPublicDID({
                method: "sidetree",
                header: '{"alg":"","kid":"","operation":"create"}'
            })
        }
    })

    it("Alice stores the did generated by her", async function () {
        for (let i = 0; i < agents.length; i++) {
            await agents[i].vdri.saveDID({
                name: didName,
                did: doc
            })
        }
    })

    it("Alice retrieves the did from store",  async function () {
        let errors = "Alice didn't retrieve did: ";

        for (let i = 0; i < agents.length; i++) {
            try {
                await agents[i].vdri.getDID({id: didID})
            }catch (e) {
                errors += e.message;
                continue
            }

            return
        }

        throw new Error(errors)
    })

    it("Alice validates that she has the did", async function () {
        for (let i = 0; i < agents.length; i++) {
            let resp;
            try {
                resp = await agents[i].vdri.getDIDRecords()
            }catch (e) {
                continue
            }

            for (let j = 0 ;j<resp.result.length;j++){
                if (didID === resp.result[j].id){
                    assert.equal(didName, resp.result[j].name)
                    return
                }
            }
        }

        throw new Error("Alice doesn't have did")
    })
})
