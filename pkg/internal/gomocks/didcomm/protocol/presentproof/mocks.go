// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hyperledger/aries-framework-go/pkg/didcomm/protocol/presentproof (interfaces: Provider)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	service "github.com/hyperledger/aries-framework-go/pkg/didcomm/common/service"
	vdri "github.com/hyperledger/aries-framework-go/pkg/framework/aries/api/vdri"
	storage "github.com/hyperledger/aries-framework-go/pkg/storage"
	verifiable "github.com/hyperledger/aries-framework-go/pkg/store/verifiable"
	reflect "reflect"
)

// MockProvider is a mock of Provider interface
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Messenger mocks base method
func (m *MockProvider) Messenger() service.Messenger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Messenger")
	ret0, _ := ret[0].(service.Messenger)
	return ret0
}

// Messenger indicates an expected call of Messenger
func (mr *MockProviderMockRecorder) Messenger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Messenger", reflect.TypeOf((*MockProvider)(nil).Messenger))
}

// StorageProvider mocks base method
func (m *MockProvider) StorageProvider() storage.Provider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageProvider")
	ret0, _ := ret[0].(storage.Provider)
	return ret0
}

// StorageProvider indicates an expected call of StorageProvider
func (mr *MockProviderMockRecorder) StorageProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageProvider", reflect.TypeOf((*MockProvider)(nil).StorageProvider))
}

// VDRIRegistry mocks base method
func (m *MockProvider) VDRIRegistry() vdri.Registry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VDRIRegistry")
	ret0, _ := ret[0].(vdri.Registry)
	return ret0
}

// VDRIRegistry indicates an expected call of VDRIRegistry
func (mr *MockProviderMockRecorder) VDRIRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VDRIRegistry", reflect.TypeOf((*MockProvider)(nil).VDRIRegistry))
}

// VerifiableStore mocks base method
func (m *MockProvider) VerifiableStore() verifiable.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifiableStore")
	ret0, _ := ret[0].(verifiable.Store)
	return ret0
}

// VerifiableStore indicates an expected call of VerifiableStore
func (mr *MockProviderMockRecorder) VerifiableStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifiableStore", reflect.TypeOf((*MockProvider)(nil).VerifiableStore))
}
